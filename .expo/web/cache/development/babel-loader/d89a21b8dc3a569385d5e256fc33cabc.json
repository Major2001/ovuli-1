{"ast":null,"code":"import moment from 'moment';\nvar DEFAULT_DATE_PICKER_FORMAT = 'ddd MMM D';\nvar AM = 'AM';\nvar PM = 'PM';\nvar YEAR = 365;\nvar TODAY = 'Today';\nvar ONE_DAY_IN_SECONDS = 86400;\nvar ONE_SECOND = 1000;\nexport function hourTo24Format(hour) {\n  return parseInt(moment(hour, ['h A']).format('H'), 10);\n}\nexport function hourTo12Format(hour) {\n  var currDate = new Date();\n  currDate.setHours(hour);\n  return dateTo12Hour(currDate.toISOString());\n}\nexport var dateTo12Hour = function dateTo12Hour(dateString) {\n  var localDate = new Date(dateString);\n  var hour = localDate.getHours();\n\n  if (hour === 12) {\n    return ['12', PM];\n  }\n\n  if (hour === 0) {\n    return ['12', AM];\n  }\n\n  var afterMidday = hour % 12 === hour;\n  hour = afterMidday ? hour : hour % 12;\n  var amPm = afterMidday ? AM : PM;\n  return [hour.toString(), amPm];\n};\nexport function increaseDateByDays(date, numOfDays) {\n  var nextDate = new Date(date.valueOf());\n  nextDate.setDate(nextDate.getDate() + numOfDays);\n  return nextDate;\n}\nexport function pickerDateArray(date) {\n  var daysCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : YEAR;\n  var datePickerFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_DATE_PICKER_FORMAT;\n  var startDate = date ? new Date(date) : new Date();\n  var arr = [];\n\n  for (var i = 0; i < daysCount; i++) {\n    var ithDateFromStartDate = Date.parse(startDate) / ONE_SECOND + i * ONE_DAY_IN_SECONDS;\n\n    if (moment.unix(Date.parse(new Date()) / ONE_SECOND).format('MM/DD/YYYY') === moment.unix(ithDateFromStartDate).format('MM/DD/YYYY')) {\n      arr.push(TODAY);\n    } else {\n      arr.push(formatDatePicker(ithDateFromStartDate, datePickerFormat));\n    }\n  }\n\n  return arr;\n}\n\nfunction formatDatePicker(date, format) {\n  return moment.unix(date).format(format);\n}\n\nexport function getHoursArray(format24) {\n  var hours = format24 ? {\n    min: 0,\n    max: 23\n  } : {\n    min: 1,\n    max: 12\n  };\n  var arr = [];\n\n  for (var i = hours.min; i <= hours.max; i++) {\n    arr.push((\"00\" + i).slice(-2));\n  }\n\n  return arr;\n}\nexport function getFiveMinutesArray() {\n  var arr = [];\n  arr.push('00');\n  arr.push('05');\n\n  for (var i = 10; i < 60; i += 5) {\n    arr.push(\"\" + i);\n  }\n\n  return arr;\n}\nexport function getAmArray() {\n  var arr = [];\n  arr.push(AM);\n  arr.push(PM);\n  return arr;\n}","map":{"version":3,"sources":["/home/harshit/Desktop/projects/ovuli/node_modules/react-native-wheel-picker-android/src/Utils.js"],"names":["moment","DEFAULT_DATE_PICKER_FORMAT","AM","PM","YEAR","TODAY","ONE_DAY_IN_SECONDS","ONE_SECOND","hourTo24Format","hour","parseInt","format","hourTo12Format","currDate","Date","setHours","dateTo12Hour","toISOString","dateString","localDate","getHours","afterMidday","amPm","toString","increaseDateByDays","date","numOfDays","nextDate","valueOf","setDate","getDate","pickerDateArray","daysCount","datePickerFormat","startDate","arr","i","ithDateFromStartDate","parse","unix","push","formatDatePicker","getHoursArray","format24","hours","min","max","slice","getFiveMinutesArray","getAmArray"],"mappings":"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","sourcesContent":["/**\n * @prettier\n * @flow\n * */\n\nimport moment from 'moment'\n\nconst DEFAULT_DATE_PICKER_FORMAT = 'ddd MMM D'\n\nconst AM = 'AM'\nconst PM = 'PM'\nconst YEAR = 365\nconst TODAY = 'Today'\nconst ONE_DAY_IN_SECONDS = 86400;\nconst ONE_SECOND = 1000;\n\n// it takes in format '12 AM' and return 24 format\nexport function hourTo24Format(hour: string) {\n    return parseInt(moment(hour, ['h A']).format('H'), 10)\n}\n\n// it takes in format 23 and return [11,'PM'] format\nexport function hourTo12Format(hour: number) {\n    const currDate = new Date()\n    currDate.setHours(hour)\n    return dateTo12Hour(currDate.toISOString())\n}\n\nexport const dateTo12Hour = (dateString: string) => {\n    const localDate = new Date(dateString)\n    let hour = localDate.getHours()\n    if (hour === 12) {\n        return ['12', PM]\n    }\n    if (hour === 0) {\n        return ['12', AM]\n    }\n    const afterMidday = hour % 12 === hour\n    hour = afterMidday ? hour : hour % 12\n    const amPm = afterMidday ? AM : PM\n    return [hour.toString(), amPm]\n}\n\nexport function increaseDateByDays(date: Date, numOfDays: ?number) {\n    const nextDate = new Date(date.valueOf())\n    nextDate.setDate(nextDate.getDate() + numOfDays)\n    return nextDate\n}\n\nexport function pickerDateArray(date: string, daysCount: number = YEAR, datePickerFormat: string = DEFAULT_DATE_PICKER_FORMAT) {\n    const startDate = date ? new Date(date) : new Date()\n    const arr = []\n\n    for (let i = 0; i < daysCount; i++) {\n        const ithDateFromStartDate = (Date.parse(startDate) / ONE_SECOND) + (i * ONE_DAY_IN_SECONDS)\n        if (moment.unix(Date.parse(new Date()) / ONE_SECOND).format('MM/DD/YYYY') ===\n            moment.unix(ithDateFromStartDate).format('MM/DD/YYYY')) {\n            arr.push(TODAY)\n        }\n        else {\n            arr.push(\n                formatDatePicker(ithDateFromStartDate, datePickerFormat)\n            )\n        }\n    }\n    return arr\n}\n\nfunction formatDatePicker(date: number, format: string) {\n    return moment.unix(date).format(format);\n}\n\nexport function getHoursArray(format24: boolean) {\n    const hours = format24 ? { min: 0, max: 23 } : { min: 1, max: 12 }\n    const arr = []\n    for (let i = hours.min; i <= hours.max; i++) {\n        arr.push(`00${i}`.slice(-2))\n    }\n    return arr\n}\n\nexport function getFiveMinutesArray() {\n    const arr = []\n    arr.push('00')\n    arr.push('05')\n    for (let i = 10; i < 60; i += 5) {\n        arr.push(`${i}`)\n    }\n    return arr\n}\n\nexport function getAmArray() {\n    const arr = []\n    arr.push(AM)\n    arr.push(PM)\n    return arr\n}\n"]},"metadata":{},"sourceType":"module"}