{"ast":null,"code":"'use strict';\n\nvar moment = require('moment');\n\nvar calculateOvuli = function calculateOvuli(_ref, _ref2) {\n  var lastDate = _ref.lastDate;\n  var averageCycle = _ref2.averageCycle;\n  var result = {\n    approximateOvulationDate: {\n      day: '',\n      month: ''\n    },\n    nextPeriodDate: {\n      day: '',\n      month: ''\n    },\n    nextPregnancTestDate: {\n      day: '',\n      month: ''\n    },\n    fertileWindow: {\n      start: '',\n      startMonth: '',\n      end: ''\n    }\n  };\n  result['nextPeriodDate']['day'] = moment(lastDate).add(averageCycle - 1, 'days').format('DD');\n  result['nextPeriodDate']['month'] = moment(lastDate).add(averageCycle - 1, 'days').format('MM');\n  result['nextPregnancTestDate']['day'] = moment(lastDate).add(averageCycle, 'days').format('DD');\n  result['nextPregnancTestDate']['month'] = moment(lastDate).add(averageCycle, 'days').format('MM');\n  var maxOvulationDays = 26;\n  var currentPregnancyCycle = 40 - averageCycle;\n  var ovulationDays = maxOvulationDays - currentPregnancyCycle - 1;\n  var approximateOvulationDate = moment(lastDate).add(ovulationDays, 'days');\n  result['approximateOvulationDate']['day'] = approximateOvulationDate.format('DD');\n  result['approximateOvulationDate']['month'] = approximateOvulationDate.format('MM');\n  result['fertileWindow']['start'] = moment(approximateOvulationDate).subtract(3, 'days').format('DD');\n  result['fertileWindow']['end'] = moment(approximateOvulationDate).add(1, 'days').format('DD');\n  result['fertileWindow']['startMonth'] = moment(approximateOvulationDate).subtract(3, 'days').format('MM');\n  return result;\n};\n\nvar calculateAverageCycle = function calculateAverageCycle(cycles) {\n  var totalCycleDays = 0;\n\n  for (var index = 1; index < cycles.length; index++) {\n    var start = moment(cycles[index - 1]).format('YYYY-MM-DD');\n    var end = moment(cycles[index]).format('YYYY-MM-DD');\n    start = moment(start, 'YYYY-MM-DD');\n    end = moment(end, 'YYYY-MM-DD');\n    var duration = moment.duration(start.diff(end)).asDays();\n    totalCycleDays = totalCycleDays + duration;\n  }\n\n  var averageCycleDay = totalCycleDays / (cycles.length - 1);\n  return averageCycleDay;\n};\n\nvar compareDate = function compareDate(lastDate) {\n  var dateObj = new Date(new Date().getFullYear(), lastDate.month - 1, lastDate.day);\n  var estimateDate = moment(dateObj);\n  var today = moment();\n  return estimateDate < today ? true : false;\n};\n\nmodule.exports = {\n  calculateOvuli: calculateOvuli,\n  calculateAverageCycle: calculateAverageCycle,\n  compareDate: compareDate\n};","map":{"version":3,"sources":["/home/harshit/Desktop/projects/ovuli/src/util/ovuli.js"],"names":["moment","require","calculateOvuli","lastDate","averageCycle","result","approximateOvulationDate","day","month","nextPeriodDate","nextPregnancTestDate","fertileWindow","start","startMonth","end","add","format","maxOvulationDays","currentPregnancyCycle","ovulationDays","subtract","calculateAverageCycle","cycles","totalCycleDays","index","length","duration","diff","asDays","averageCycleDay","compareDate","dateObj","Date","getFullYear","estimateDate","today","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst moment = require('moment');\n/**\n * This is a function to caluclate female different ovuli days.\n * @param {string} lastDate -  Day of female's last period.\n * @param {string} averageCycle - Average cycle days of females.\n *\n */\nconst calculateOvuli = ({ lastDate }, { averageCycle }) => {\n  let result = {\n    approximateOvulationDate: { day: '', month: '' },\n    nextPeriodDate: { day: '', month: '' },\n    nextPregnancTestDate: { day: '', month: '' },\n    fertileWindow: { start: '', startMonth: '', end: '' },\n  };\n\n  // To calculate period date\n  result['nextPeriodDate']['day'] = moment(lastDate)\n    .add(averageCycle - 1, 'days')\n    .format('DD');\n  result['nextPeriodDate']['month'] = moment(lastDate)\n    .add(averageCycle - 1, 'days')\n    .format('MM');\n\n  // To calculate next pregnancy date\n  result['nextPregnancTestDate']['day'] = moment(lastDate)\n    .add(averageCycle, 'days')\n    .format('DD');\n  result['nextPregnancTestDate']['month'] = moment(lastDate)\n    .add(averageCycle, 'days')\n    .format('MM');\n\n  // To calculate approximate ovulation\n  let maxOvulationDays = 26;\n  let currentPregnancyCycle = 40 - averageCycle;\n  let ovulationDays = maxOvulationDays - currentPregnancyCycle - 1;\n\n  let approximateOvulationDate = moment(lastDate).add(ovulationDays, 'days');\n\n  result['approximateOvulationDate']['day'] = approximateOvulationDate.format('DD');\n  result['approximateOvulationDate']['month'] = approximateOvulationDate.format('MM');\n\n  // To calculate Fertile window\n  result['fertileWindow']['start'] = moment(approximateOvulationDate)\n    .subtract(3, 'days')\n    .format('DD');\n  result['fertileWindow']['end'] = moment(approximateOvulationDate)\n    .add(1, 'days')\n    .format('DD');\n  result['fertileWindow']['startMonth'] = moment(approximateOvulationDate)\n    .subtract(3, 'days')\n    .format('MM');\n\n  return result;\n};\n\n/**\n * This is a function to caluclate female different ovuli days.\n * @param {string} cycles -  Array of female's last `n` numbers of periods's first days.\n *\n *\n */\nconst calculateAverageCycle = cycles => {\n  let totalCycleDays = 0;\n\n  for (let index = 1; index < cycles.length; index++) {\n    let start = moment(cycles[index - 1]).format('YYYY-MM-DD');\n    let end = moment(cycles[index]).format('YYYY-MM-DD');\n\n    // If you are using moment.js you can do it easily.\n\n    start = moment(start, 'YYYY-MM-DD');\n    end = moment(end, 'YYYY-MM-DD');\n\n    //Difference in number of days\n    let duration = moment.duration(start.diff(end)).asDays();\n    totalCycleDays = totalCycleDays + duration;\n  }\n\n  let averageCycleDay = totalCycleDays / (cycles.length - 1);\n\n  return averageCycleDay;\n};\n\nconst compareDate = lastDate => {\n  const dateObj = new Date(new Date().getFullYear(), lastDate.month - 1, lastDate.day);\n  const estimateDate = moment(dateObj);\n\n  const today = moment();\n\n  return estimateDate < today ? true : false;\n};\n\nmodule.exports = {\n  calculateOvuli,\n  calculateAverageCycle,\n  compareDate,\n};\n"]},"metadata":{},"sourceType":"script"}